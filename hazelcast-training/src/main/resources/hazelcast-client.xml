<hazelcast-client
	xsi:schemaLocation="http://www.hazelcast.com/schema/client-config hazelcast-client-config-3.5.xsd"
	xmlns="http://www.hazelcast.com/schema/client-config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<!--Cluster name to connect -->
	<group>
		<name>dev</name>
		<password>dev-pass</password>
	</group>

	<!--client properties -->
	<properties>
		<property name="hazelcast.client.connection.timeout">10000</property>
		<property name="hazelcast.client.retry.count">6</property>
	</properties>

	<!--Network configuration details -->
	<network>
		<cluster-members>
			<!--initial cluster members to connect -->
			<address>localhost</address>
		</cluster-members>

		<!--smart-routing : If true, client will route the key based operations 
			to owner of the key at the best effort. Note that it uses a cached version 
			of com.hazelcast.core.PartitionService.getPartitions() and doesn't guarantee 
			that the operation will always be executed on the owner. The cached table 
			is updated every 10 seconds. Default value is true. -->
		<smart-routing>true</smart-routing>
		
		<!-- If true, client will redo the operations that were executing on the 
			server and client lost the connection. This can be because of network, or 
			simply because the member died. However it is not clear whether the application 
			is performed or not. For idempotent operations this is harmless, but for 
			non idempotent ones retrying can cause to undesirable effects. Note that 
			the redo can perform on any member. -->
		<redo-operation>true</redo-operation>

		<socket-interceptor enabled="true">
			<!--socket-interceptor configuration details -->
		</socket-interceptor>

		<aws enabled="false" connection-timeout-seconds="11">
			<!--AWS configuration details -->
		</aws>
	</network>

	<!--local executor pool size -->
	<executor-pool-size>40</executor-pool-size>

	<!--security credentials configuration -->
	<security>
		<credentials>com.hazelcast.security.UsernamePasswordCredentials
		</credentials>
	</security>

	<listeners>
		<!--listeners -->
	</listeners>

	<serialization>
		<!--serialization configuration details -->
	</serialization>

	<proxy-factories>
		<!--ProxyFactory configuration details -->
	</proxy-factories>

	<!--load balancer configuration -->
	<!-- type can be "round-robin" or "random" -->
	<load-balancer type="random" />

	<near-cache name="mapName">
		<!--near cache configuration details of a map -->
	</near-cache>

</hazelcast-client>